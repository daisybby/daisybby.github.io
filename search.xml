<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Redis注册为windows服务</title>
    <url>/2024/06/17/Redis%E6%B3%A8%E5%86%8C%E4%B8%BAwindows%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>安装完Redis需要用命令行启动，而且要保持这个窗口不关闭。</p>
<span id="more"></span>
<p>注册为windows服务后不再受控制台的影响。<br><strong>控制台输入：</strong><br><code>redis-server.exe --service-install redis.windows.conf </code><br><strong>开启Redis服务:</strong><br>控制台输入：<code>redis-server --service-start</code></p>
<blockquote>
<p>注意：在redis安装目录下进入cmd就能打开控制台。</p>
</blockquote>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
  </entry>
  <entry>
    <title>session、cookie和token</title>
    <url>/2024/06/18/session%E3%80%81cookie%E5%92%8Ctoken/</url>
    <content><![CDATA[<h1 id="session、cookie和token"><a href="#session、cookie和token" class="headerlink" title="session、cookie和token"></a>session、cookie和token</h1><ul>
<li>cookie：保存在客户端，用来解决客户端保存信息的问题。</li>
<li>session：保存在服务器端，每个客户端对应一个session。</li>
<li>token：无状态且跨域，能够有效防御CSRF，解决session依赖单个服务器的问题。</li>
</ul>
<span id="more"></span>
<h2 id="1-cookie"><a href="#1-cookie" class="headerlink" title="1.cookie"></a>1.cookie</h2><p>浏览器可以将服务器端发送的信息保存到cookie中，在浏览器之后每次发送请求时，可以将存活的cookie放到请求头一起发送给服务器端。</p>
<img src="/2024/06/18/session%E3%80%81cookie%E5%92%8Ctoken/cookie-and-session.png" class="" title="img1">
<h2 id="2-session"><a href="#2-session" class="headerlink" title="2.session"></a>2.session</h2><p>&ensp;&ensp;客户端向服务端发送请求，服务端为这个请求开辟一块内存空间，即session对象，保存方式为ConcurrentHashMap。<br>&ensp;&ensp;服务器端会为session设置过期时间，避免堆积大量session。（但在高并发场景下还是会有大量session，占据存储空间）<br>session和cookie协作的详细流程：</p>
<ul>
<li>step1:客户端发送http请求</li>
<li>step2:服务端创建session对象，将sessionID通过响应头的set-Cookie命令设置到cookie中。</li>
<li>step3:在浏览器会话期间，cookie都被保存到浏览器，之后每次浏览器发送请求都携带cookie。</li>
<li>step4:服务器通过请求携带的cookie解析出sessionID，找到对应的session。</li>
</ul>
<h2 id="3-token"><a href="#3-token" class="headerlink" title="3.token"></a>3.token</h2><p>出现token是因为cookie不支持跨域访问。<br><strong>token的工作原理：</strong></p>
<ul>
<li>客户端发送登录请求，将用户名和密码传递到服务器。</li>
<li>服务器验证用户信息通过，签发一个token，token中包含用户信息，token发送给客户端。</li>
<li>客户端接收到token保存到cookie或者Local Storage中，之后每次请求都携带token。</li>
<li>服务器受到请求后，解析验证token，验证通过即可放行。</li>
</ul>
<p>token模式下，服务器是不需要保存session的，因为token中包含有用户信息，解析出来利用即可。<br>更多内容等做到项目的权限管理模块，详细记录。</p>
]]></content>
      <categories>
        <category>基础概念和原理</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis实战项目笔记一：短信登录</title>
    <url>/2024/06/19/redis-1/</url>
    <content><![CDATA[<h1 id="笔记一：短信验证登录"><a href="#笔记一：短信验证登录" class="headerlink" title="笔记一：短信验证登录"></a>笔记一：短信验证登录</h1><p><strong>三个关键功能：</strong></p>
<span id="more"></span>
<p>1.用户提供手机号，获取6位数字验证码；</p>
<!--more-->
<p>2.用户提供手机号和验证码，进行登录；<br>3.对于用户请求，验证用户登录状态。</p>
<h2 id="一、业务逻辑"><a href="#一、业务逻辑" class="headerlink" title="一、业务逻辑"></a>一、业务逻辑</h2><h3 id="1-获取验证码"><a href="#1-获取验证码" class="headerlink" title="1.获取验证码"></a>1.获取验证码</h3><p>参数：用户手机号<br>返回：6位数字验证码<br>关键点就是要<strong>校验手机号格式</strong>、<strong>验证码保存到session</strong>中以备后续验证。</p>
<img src="/2024/06/19/redis-1/img1.png" class="" title="img1">

<h3 id="2-验证码登录"><a href="#2-验证码登录" class="headerlink" title="2.验证码登录"></a>2.验证码登录</h3><ol>
<li>用户提供手机号和验证码</li>
<li>信息校验：验证码匹配</li>
<li>校验手机号格式：虽然生成验证码时已经校验过，但用户在登陆时输入的手机号依然存在错误的可能性。</li>
<li>根据手机号查找用户信息，有则信息保存到session（便于后续登录验证）</li>
<li>用户不存在则创建新用户。</li>
</ol>
<img src="/2024/06/19/redis-1/img2.png" class="" title="img2">

<h3 id="3-登录状态检查"><a href="#3-登录状态检查" class="headerlink" title="3.登录状态检查"></a>3.登录状态检查</h3><p><strong>1.对于用户发来的请求，检查用户是否已经登录。</strong></p>
<ol>
<li>用户发来请求，请求携带cookie</li>
<li>根据cookie中的sessionID查找到对应的session（不需要后端程序员实现）</li>
<li>检查session中是否有用户信息，有则将用户信息保存到threadLocal（关键点）</li>
<li>session中没有用户信息，说明用户没有登录。</li>
</ol>
<img src="/2024/06/19/redis-1/img3.png" class="" title="img3">

<p><strong>2.什么时候验证用户登录状态？</strong><br>在请求到达服务器后，在调用对应的controller处理方法之前。那怎么实现？可以用过滤器和拦截器（详见<a href="https://zhuanlan.zhihu.com/p/697414738">过滤器和拦截器的区别与联系</a>）。<br><strong>3.验证后要做什么？为什么要用ThreadLocal，而不是将用户信息保持在session中？</strong><br>如果session中有用户信息，那这个信息就是登录时保存到session中的，说明已经登录过了。我们在从session中获取信息时，需要将HttpSession对象传递到方法中，如果在之后的service等多处还需要用户信息，会出现频繁传递session对象的问题，而且在高并发场景下，可能会出现session混乱。<br>在服务器端，每个请求对应一个线程，那么我们可以将用户信息保存成线程内部全局可见的，即ThreadLocal的形式。线程可以全局获取用户信息，提高开发效率。<br><strong>4.注意事项</strong><br>ThreadLocal也有缺点：</p>
<ul>
<li><strong>内存泄漏：</strong> ThreadLocal和线程是绑定的，线程一直存在，那么这部分内存一直占用，如果线程数量过多，可能会占据较大内存空间；如果不及时清理这部分空间，可能会导致内存泄漏。<blockquote>
<p>内存泄漏：内存因为一些原因没有释放或者无法释放，就是内存泄漏。</p>
</blockquote>
</li>
<li><strong>上下文切换问题：</strong> 每个线程可能都有自己的本地变量，当需要在线程间共享数据时，可能涉及到线程上下文切换，增加程序的复杂性和开销。</li>
</ul>
<blockquote>
<p><strong>一定要在请求处理完毕之后，将用户信息从threadLocal释放。</strong></p>
</blockquote>
<p><strong>5.拦截器和过滤器的区别是什么？</strong></p>
<img src="/2024/06/19/redis-1/img4.png" class="" title="img4">
<ul>
<li>Filter可以拦截一切请求，通常是筛选掉一些不和要求的请求；</li>
<li>Interceptor可以设置在请求被处理之前、被处理之后，或者是对请求到达controller之后，对返回的结果进行处理。可以调用业务逻辑！</li>
</ul>
<h2 id="二、session存在的问题"><a href="#二、session存在的问题" class="headerlink" title="二、session存在的问题"></a>二、session存在的问题</h2><ul>
<li>登录后用户信息暂存在session中，在高并发场景下需要较大的内存开销；</li>
<li>session是不能被多个tomcat服务器共享的，在分布式场景下session共享比较麻烦。<br><strong>session的作用是什么？</strong></li>
<li>基于内存的，访问速度快。</li>
<li>记录登录后的用户信息，保持登录状态。</li>
<li>需要多服务器都能够访问。<br>因此，可以用<strong>Redis</strong>来满足以上需求。</li>
</ul>
<h2 id="三、使用Redis优化登录验证"><a href="#三、使用Redis优化登录验证" class="headerlink" title="三、使用Redis优化登录验证"></a>三、使用Redis优化登录验证</h2><h3 id="1-生成验证码"><a href="#1-生成验证码" class="headerlink" title="1.生成验证码"></a>1.生成验证码</h3><ul>
<li>session下：验证码保存在session中，用sessionID标识唯一；</li>
<li>Redis下：验证码保存在Redis数据库，用Key标识，一个手机号对应一个验证码，故key用手机号。但是为了开发的便利性和直观性，需要在phone之前添加前缀（这是一种数据保存思想）。</li>
<li>更新后的流程图：<img src="/2024/06/19/redis-1/img5.png" class="" title="img5">
&ensp;&ensp;&ensp;&ensp;校验码需要设置<strong>过期时间</strong>，否则可能出现大量废弃校验码堆积，造成存储空间的浪费。</li>
</ul>
<h3 id="2-用户登录"><a href="#2-用户登录" class="headerlink" title="2.用户登录"></a>2.用户登录</h3><ul>
<li>session下：从session获取验证码-&gt;匹配验证码-&gt;用户信息保存到session；</li>
<li>Redis下：从Redis获取验证码-&gt;匹配验证码-&gt;用户信息保存到Redis<ul>
<li>校验码的Key是前缀+手机号</li>
<li>用户信息保存方式：String或者Hash类型，Hash类型可以修改用户某些信息，更灵活，用hash保存</li>
<li>用户信息的key是前缀+随机的token</li>
</ul>
</li>
</ul>
<blockquote>
<p>为什么需要随机的token？<br>答：因为用户发来请求，服务器需要识别这个请求是哪个用户的，sessionID类似的功能，但是我们又不能直接用手机号识别，对用户信息不安全。于是，可以用一个随机的token，登录成功后返回给客户端，之后每次请求都携带这个token即可。</p>
</blockquote>
<ul>
<li>流程图：<img src="/2024/06/19/redis-1/img6.png" class="" title="img6">
<strong>注意事项：</strong><br>&ensp;&ensp;&ensp;&ensp;登录成功后，用户信息保存在Redis中，但是需要设置过期时间，不然每次登录都会产生一个记录，造成存储空间的浪费。</li>
</ul>
<h3 id="3-验证登录状态"><a href="#3-验证登录状态" class="headerlink" title="3.验证登录状态"></a>3.验证登录状态</h3><ul>
<li>session下：用户传递来sessionID-&gt;session中获取用户信息-&gt;保存到ThreadLocal，便于这个请求处理期间使用；</li>
<li>Redis下：用户请求头携带token-&gt;根据token查找用户信息-&gt;保存到ThreadLocal。</li>
<li>流程图变化：<img src="/2024/06/19/redis-1/img7.png" class="" title="img7">
<strong>注意事项：</strong></li>
<li>验证登录状态是通过拦截器Interceptor实现的，这个实现并不属于Spring框架，是我们自己写的工具。</li>
<li>Interceptor中涉及到了StringRedisTemplate，这个不能用Autowire注解自动注入，需要在LoginInterceptor构造函数中手动注入。</li>
<li>但是LoginInterceptor是在MvcConfig中调用的，所以在MvcConfig中可以自动注入一个Redis工具类，然后传递到Interceptor就行。<blockquote>
<p>为什么需要刷新登录信息有效时间呢？<br>答：因为session的情况下，只要有访问，session的有效时间就是刷新的。但是Redis情况下，用expire设置用户信息过期时间，即使一直在访问，到了时间还是会自动过期，我们希望的是如果有访问，那么就不断刷新过期时间，30min完全没有操作再登录失效。</p>
</blockquote>
</li>
</ul>
<h2 id="四、存在的问题以及优化"><a href="#四、存在的问题以及优化" class="headerlink" title="四、存在的问题以及优化"></a>四、存在的问题以及优化</h2><h3 id="1-登录状态刷新优化"><a href="#1-登录状态刷新优化" class="headerlink" title="1.登录状态刷新优化"></a>1.登录状态刷新优化</h3><p><strong>问题：</strong> 用户登录后访问不被拦截的网页，超过了有效时间，然后再看个人信息，发现登录过期了。造成了不便。<br><strong>改进思路：</strong> 设置两个拦截器，第一个拦截器负责拦截所有请求，对于有登录状态的用户请求则刷新有效时间；第二个拦截器负责给第一个拦截器兜底，第一个拦截器放行了所有的请求，其中有些请求没有登录状态，那么有一些涉及到个人信息的请求还是需要拦截下来并拒绝的。<br><strong>实现效果：</strong> 对于任何请求，只要所属用户处于登录状态，就刷新登录信息的有效时间。</p>
<h3 id="2-将用户信息保存到Redis报错"><a href="#2-将用户信息保存到Redis报错" class="headerlink" title="2.将用户信息保存到Redis报错"></a>2.将用户信息保存到Redis报错</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserDTO userDTO= BeanUtil.copyProperties(user,UserDTO.class);</span><br><span class="line">String token= UUID.randomUUID().toString();</span><br><span class="line"><span class="comment">//将user对象转换成hash</span></span><br><span class="line">Map&lt;String, Object&gt; hashMap=BeanUtil.beanToMap(userDTO);</span><br><span class="line"><span class="comment">//保存信息到Redis</span></span><br><span class="line">stringRedisTemplate.opsForHash().putAll(LOGIN_USER_KEY+token,hashMap);</span><br><span class="line">stringRedisTemplate.expire(LOGIN_USER_KEY+token,LOGIN_USER_TTL,TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure>
<p>&ensp;&ensp;&ensp;&ensp;在上面的代码中,直接将userDTO对象转换成HahMap，但是userDTO中部分字段并不是string类型，比如UID是Long类型，那么就会遇到转换成string类型的fieldValue报错。<br>解决方案是通过hutools提供的选择性拷贝工具copyOptions，具体如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserDTO userDTO= BeanUtil.copyProperties(user,UserDTO.class);</span><br><span class="line"><span class="comment">//用户信息保存到Redis中</span></span><br><span class="line"><span class="comment">//生成一个随机的token</span></span><br><span class="line">String token= UUID.randomUUID().toString();</span><br><span class="line"><span class="comment">//将user对象转换成hash</span></span><br><span class="line">Map&lt;String, Object&gt; hashMap=BeanUtil.beanToMap(userDTO,<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(), CopyOptions.create()</span><br><span class="line">        .setIgnoreNullValue(<span class="literal">true</span>)</span><br><span class="line">        .setFieldValueEditor((fieldName,fieldValue)-&gt;fieldValue.toString()));</span><br><span class="line"><span class="comment">//保存信息到Redis</span></span><br><span class="line">stringRedisTemplate.opsForHash().putAll(LOGIN_USER_KEY+token,hashMap);</span><br><span class="line">stringRedisTemplate.expire(LOGIN_USER_KEY+token,LOGIN_USER_TTL,TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure>
<h3 id="3-个人遇到的bug："><a href="#3-个人遇到的bug：" class="headerlink" title="3.个人遇到的bug："></a>3.个人遇到的bug：</h3><p>&ensp;&ensp;&ensp;&ensp;在编写userService实现类时，类有一个private成员变量stringRedisTemplate，但是我没有用@Resource注解修饰这个类，于是在之后使用这个类时出现了空指针异常。<br>&ensp;&ensp;&ensp;&ensp;原因：在类中注入bean有三种方式，一种是构造函数手动注入，一种是使用注解自动注入。<br><strong>1.</strong> 手动注入，我们在RefreshInterceptor中有用到，构造函数注入StringRedisTemplate对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefreshInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RefreshInterceptor</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate=stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>2.</strong> 通过注解@Resource或者@Autowired注入。这里牵扯到一个八股文，Resource和Autowired的关系：<a href="https://daisybby.github.io/2024/06/20/Resource-and-Autowired/">Resource于Autowired的区别与联系</a></p>
<p>在这部分，似乎对Spring IOC容器对Bean管理的思想理解更加深刻了，相关的笔记待补充。</p>
]]></content>
      <categories>
        <category>Redis项目笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Resource和Autowired之间的区别与联系</title>
    <url>/2024/06/20/Resource-and-Autowired/</url>
    <content><![CDATA[<h1 id="Resource和Autowired之间的关系"><a href="#Resource和Autowired之间的关系" class="headerlink" title="Resource和Autowired之间的关系"></a>Resource和Autowired之间的关系</h1><h2 id="1-相同点"><a href="#1-相同点" class="headerlink" title="1.相同点"></a>1.相同点</h2><span id="more"></span>
<p>Resource和Autowired都是获取IOC容器中的bean对象。<br>在单例模式下，以下代码获取到的对象是相同的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> User user1;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> User user2;</span><br></pre></td></tr></table></figure>
<h2 id="2-不同点"><a href="#2-不同点" class="headerlink" title="2.不同点"></a>2.不同点</h2><h3 id="2-1-支持方不同"><a href="#2-1-支持方不同" class="headerlink" title="2.1.支持方不同"></a>2.1.支持方不同</h3><ul>
<li><strong>Resource:</strong> 属于JDK，支持更多的参数设置，比如可以设置name和type；所有的IOC容器都支持Resource注解，框架迁移时不需要修改。</li>
<li><strong>Autowired:</strong> 属于Spring框架，其他的框架可能不支持。</li>
</ul>
<h3 id="2-2-匹配顺序不同"><a href="#2-2-匹配顺序不同" class="headerlink" title="2.2.匹配顺序不同"></a>2.2.匹配顺序不同</h3><ul>
<li><strong>Resource:</strong> 名称-&gt;类型；<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;BeanOne&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanOne</span> <span class="keyword">implements</span> <span class="title class_">Bean</span> &#123;&#125;</span><br><span class="line"><span class="meta">@Component(&quot;BeanTwo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanTwo</span> <span class="keyword">implements</span> <span class="title class_">Bean</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="comment">//1.会报错，先按照type同时匹配到BeanOne和BeanTwo，再按照名称匹配bean，没有name为bean的对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Bean bean;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.按照type同时匹配到BeanOne和BeanTwo，再按照名称匹配到BeanOne</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Bean beanOne;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.使用type匹配到beanOne和beanTwo，Qualifier指定了要匹配的名称，匹配到beanOne</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;beanOne&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Bean bean;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>Autowired:</strong> 类型-&gt;名称；<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="comment">//1.先按照name匹配，没有，再按照type匹配到两个，无法确定，报错。</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Bean bean;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.按照名称，一次匹配成功</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Bean beanOne;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.指定匹配类型</span></span><br><span class="line">    <span class="meta">@Resource(type=BeanOne.class)</span></span><br><span class="line">    <span class="keyword">private</span> Bean bean;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>无论是Resource还是Autowired，匹配都是<strong>不区分大小写</strong>的。</p>
</blockquote>
</li>
</ul>
<h3 id="2-3-作用域不同"><a href="#2-3-作用域不同" class="headerlink" title="2.3.作用域不同"></a>2.3.作用域不同</h3><ul>
<li><strong>Autowired:</strong> 用于setter、构造器、属性。<blockquote>
<p>尽管用于setter时，setter函数有参数，但是并不需要我们显示调用这个setter。</p>
</blockquote>
</li>
<li><strong>Resource:</strong> setter和属性。</li>
</ul>
]]></content>
      <categories>
        <category>Spring基础</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>常用注解</tag>
      </tags>
  </entry>
  <entry>
    <title>setFieldValueEditor出现空指针异常</title>
    <url>/2024/06/21/setFieldValueEditor-bug/</url>
    <content><![CDATA[<h1 id="Hutool提供的BeanUtil-beanToMap出现空指针异常"><a href="#Hutool提供的BeanUtil-beanToMap出现空指针异常" class="headerlink" title="Hutool提供的BeanUtil.beanToMap出现空指针异常"></a>Hutool提供的BeanUtil.beanToMap出现空指针异常</h1><p>先看bug出现的位置：</p>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; map = BeanUtil.beanToMap(shop, <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(), CopyOptions.create()</span><br><span class="line">                .setIgnoreNullValue(<span class="literal">true</span>) <span class="comment">//忽略空值</span></span><br><span class="line">                .setFieldValueEditor((fieldName,fieldValue)-&gt;fieldValue.toString()));</span><br><span class="line">stringRedisTemplate.opsForHash().putAll(CACHE_SHOP_KEY + id, map);</span><br><span class="line">stringRedisTemplate.expire(CACHE_SHOP_KEY + id, CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure>
<p>以上代码将shop对象以hash形式保存到Redis，但是实际运行时出现了空指针异常。<br>如果shop对象里面有属性值为null，就会出现如下空指针异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.NullPointerException: <span class="literal">null</span></span><br><span class="line">	at com.hmdp.service.impl.ShopServiceImpl.lambda$queryById$<span class="number">0</span>(ShopServiceImpl.java:<span class="number">56</span>) ~[classes/:na]</span><br><span class="line">	at cn.hutool.core.bean.copier.CopyOptions.editFieldValue(CopyOptions.java:<span class="number">258</span>) ~[hutool-all-<span class="number">5.7</span><span class="number">.17</span>.jar:na]</span><br><span class="line">	at cn.hutool.core.bean.copier.BeanCopier.lambda$beanToMap$<span class="number">1</span>(BeanCopier.java:<span class="number">233</span>) ~[hutool-all-<span class="number">5.7</span><span class="number">.17</span>.jar:na]</span><br><span class="line">	at java.util.LinkedHashMap$LinkedValues.forEach(LinkedHashMap.java:<span class="number">608</span>) ~[na:<span class="number">1.8</span><span class="number">.0_401</span>]</span><br><span class="line">	at cn.hutool.core.bean.BeanUtil.descForEach(BeanUtil.java:<span class="number">182</span>) ~[hutool-all-<span class="number">5.7</span><span class="number">.17</span>.jar:na]</span><br><span class="line">	at cn.hutool.core.bean.copier.BeanCopier.beanToMap(BeanCopier.java:<span class="number">195</span>) ~[hutool-all-<span class="number">5.7</span><span class="number">.17</span>.jar:na]</span><br><span class="line">	at cn.hutool.core.bean.copier.BeanCopier.copy(BeanCopier.java:<span class="number">106</span>) ~[hutool-all-<span class="number">5.7</span><span class="number">.17</span>.jar:na]</span><br><span class="line">	at cn.hutool.core.bean.BeanUtil.beanToMap(BeanUtil.java:<span class="number">690</span>) ~[hutool-all-<span class="number">5.7</span><span class="number">.17</span>.jar:na]</span><br></pre></td></tr></table></figure>
<p><strong>已经设置了setIgnoreNullValue为true，忽略空值，为什么还会出现这个问题？</strong><br>准确来说，报错的地方时fieldValue.toString()，尽管设置了忽略空值，但是fieldValue.toString()还是会执行的，null当然有空指针异常。<br><strong>具体原因：</strong></p>
<ul>
<li>setFieldValueEditor的触发优先级高于setIgnoreNullValue，我们需要在setFieldValueEditor中进行判空;</li>
<li>可能shop部分属性是允许null的，我们希望给一个默认值，如果先执行setIgnoreNullValue，可能会导致这部分属性被过滤掉，不保存到Redis中去。</li>
</ul>
<p><strong>解决方案：</strong><br>我们在setFieldValueEditor中判空处理就行。</p>
<img src="/2024/06/21/setFieldValueEditor-bug/image.png" class="" title="img">
<p>可以看到distance的值是null，我们用默认属性0来替代就行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; map = BeanUtil.beanToMap(shop, <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(), CopyOptions.create()</span><br><span class="line">                .setIgnoreNullValue(<span class="literal">true</span>) <span class="comment">//忽略空值</span></span><br><span class="line">                .setFieldValueEditor((fieldName,fieldValue)-&gt;&#123;</span><br><span class="line">                    <span class="keyword">if</span>(fieldValue==<span class="literal">null</span>)&#123;</span><br><span class="line">                        fieldValue=<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        fieldValue=fieldValue.toString();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> fieldValue;</span><br><span class="line">                &#125;));</span><br><span class="line">stringRedisTemplate.opsForHash().putAll(CACHE_SHOP_KEY + id, map);</span><br><span class="line">stringRedisTemplate.expire(CACHE_SHOP_KEY + id, CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Bug实录</category>
      </categories>
      <tags>
        <tag>Hutool</tag>
      </tags>
  </entry>
  <entry>
    <title>布隆过滤器</title>
    <url>/2024/06/22/Bloom-Filter/</url>
    <content><![CDATA[<h1 id="布隆过滤器的概念和原理"><a href="#布隆过滤器的概念和原理" class="headerlink" title="布隆过滤器的概念和原理"></a>布隆过滤器的概念和原理</h1><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h2><span id="more"></span>
<p>布隆过滤器是一种数据结构，用于快速检索元素是否可能存在于一个集合中。<br>布隆过滤器的两个重要组成：K个hash函数和一个bit数组。</p>
<h2 id="3-布隆过滤器的工作过程"><a href="#3-布隆过滤器的工作过程" class="headerlink" title="3.布隆过滤器的工作过程"></a>3.布隆过滤器的工作过程</h2><p><strong>存储元素</strong><br>对于一个元素item，通过K个hash函数计算出多个hash索引，然后将这些索引对应的位都设置为1，如果这些位置已经为1，不需要再次设置。<br><strong>查询元素</strong><br>判断元素item是否存在，也是检查K个hash函数计算出来的位置是否都为1：</p>
<ul>
<li>如果有0，那这个元素一定不存在。</li>
<li>如果全为1，元素可能存在，也可能不存在。</li>
</ul>
<p>查询时间效率是O(K)，K表示hash函数个数。（可以，这很ok~)<br><strong>删除元素</strong><br>将item对应的hash位置都设置为0。但是这存在问题，如果发生了hash冲突，会误删其他元素。</p>
<img src="/2024/06/22/Bloom-Filter/img1.png" class="" title="img1">

<h2 id="3-布隆过滤器的误判"><a href="#3-布隆过滤器的误判" class="headerlink" title="3.布隆过滤器的误判"></a>3.布隆过滤器的误判</h2><p>为什么全1是“可能”存在，而不是“肯定”存在？<br>有可能根本就不存在”hello”这个单词，但是bit数组中这个单词对应的hash值位置都是1，已经表达了其他的单词，那按照“hash位置全为1则存在”的规则，得到的是”hello”存在的假象。<br>归根结底，布隆过滤器的误判是由hash冲突造成的。想要降低误判概率，主要的办法就是降低hash冲突发生的概率，增加hash算法个数或者扩大bit数组。</p>
<img src="/2024/06/22/Bloom-Filter/img2.png" class="" title="img2">
<p><strong>可以利用布隆过滤器判断不存在，解决缓存穿透恰好就是利用布隆过滤器判断不存在。</strong></p>
<h2 id="4-常见应用"><a href="#4-常见应用" class="headerlink" title="4.常见应用"></a>4.常见应用</h2><ul>
<li><strong>网页爬虫：</strong> 过滤掉已经爬取的网页，避免重复爬取，浪费资源。</li>
<li><strong>缓存系统：</strong> 判断一个查询是否存在于缓存中，减少缓存查询次数。更重要的是，布隆过滤器经常用来解决缓存穿透的问题（判断不存在）。</li>
<li><strong>分布式系统：</strong> 判断元素是否存在于分布式缓存中，避免在所有节点上进行查询，减少网络负载。</li>
<li><strong>垃圾邮件过滤：</strong> 判断邮件地址是否在垃圾邮件列表中。</li>
<li><strong>黑名单过滤：</strong> 判断IP地址或者手机号是否在黑名单中。</li>
</ul>
<h2 id="4-如何使用布隆过滤器"><a href="#4-如何使用布隆过滤器" class="headerlink" title="4.如何使用布隆过滤器"></a>4.如何使用布隆过滤器</h2><h3 id="1-通过Google-Guava库"><a href="#1-通过Google-Guava库" class="headerlink" title="1.通过Google Guava库"></a>1.通过Google Guava库</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.hash.BloomFilter;</span><br><span class="line"><span class="keyword">import</span> com.google.common.hash.Funnels;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomFilterExample</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建布隆过滤器，预计插入100个元素，误判率为1%</span></span><br><span class="line">        BloomFilter&lt;String&gt; bloomFilter=BloomFilter.create(Funnels.stringFunnel(),<span class="number">100</span>,<span class="number">0.01</span>);</span><br><span class="line">        </span><br><span class="line">        bloomFilter.put(<span class="string">&quot;Daisybby&quot;</span>);</span><br><span class="line">        bloomFilter.put(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        bloomFilter.put(<span class="string">&quot;666&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断元素是否存在</span></span><br><span class="line">        System.out.println(bloomFilter.mightContain(<span class="string">&quot;Daisybby&quot;</span>));</span><br><span class="line">        System.out.println(bloomFilter.mightContain(<span class="string">&quot;what&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-通过Apache-Commons"><a href="#2-通过Apache-Commons" class="headerlink" title="2.通过Apache Commons"></a>2.通过Apache Commons</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.BloomFilter;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.HashFunctionIdentity;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomFilterExample</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        BloomFilter&lt;String&gt; bloomFilter=<span class="keyword">new</span> <span class="title class_">BloomFilter</span>&lt;&gt;(HashFunctionIdentity.hashFunction(StringUtils::hashCode),<span class="number">100</span>,<span class="number">0.01</span>);</span><br><span class="line">        </span><br><span class="line">        bloomFilter.put(<span class="string">&quot;Daisybby&quot;</span>);</span><br><span class="line">        bloomFilter.put(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        bloomFilter.put(<span class="string">&quot;666&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断元素是否存在</span></span><br><span class="line">        System.out.println(bloomFilter.mightContain(<span class="string">&quot;Daisybby&quot;</span>));</span><br><span class="line">        System.out.println(bloomFilter.mightContain(<span class="string">&quot;what&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-在Redis中可以通过Bloom模块来使用，使用Redisssion可以："><a href="#3-在Redis中可以通过Bloom模块来使用，使用Redisssion可以：" class="headerlink" title="3.在Redis中可以通过Bloom模块来使用，使用Redisssion可以："></a>3.在Redis中可以通过Bloom模块来使用，使用Redisssion可以：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Config config=<span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">config.useSingleServer().setAddress(<span class="string">&quot;redis://127.0.0.1:6379&quot;</span>);</span><br><span class="line"></span><br><span class="line">RedissonClient redisson=Redisson.create(config);</span><br><span class="line">RBloomFilter&lt;String&gt; bloomFilter=redisson.getBloomFilter(<span class="string">&quot;myFilter&quot;</span>);</span><br><span class="line">bloomFilter.tryInit(<span class="number">100</span>,<span class="number">0.01</span>);</span><br><span class="line">bloomFilter.add(<span class="string">&quot;Daisybby&quot;</span>);</span><br><span class="line">bloomFilter.add(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">bloomFilter.add(<span class="string">&quot;666&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(bloomFilter.contains(<span class="string">&quot;Daisybby&quot;</span>));</span><br><span class="line">System.out.println(bloomFilter.contains(<span class="string">&quot;what&quot;</span>));</span><br><span class="line">redisson.shutdown();</span><br></pre></td></tr></table></figure>
<p>Jedis也可以，不再赘述。</p>
]]></content>
      <categories>
        <category>基础概念和原理</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis保存对象为String还是hash？</title>
    <url>/2024/06/23/save-object-as-string-or-hash/</url>
    <content><![CDATA[<h1 id="1-对象序列化后保存到Redis"><a href="#1-对象序列化后保存到Redis" class="headerlink" title="1.对象序列化后保存到Redis"></a>1.对象序列化后保存到Redis</h1><p>保存的是序列化后的对象，这种方式在Redis中很难看出来对象的含义。</p>
<span id="more"></span>
<p><strong>优点：</strong></p>
<ul>
<li><strong>简洁性：</strong> 直接序列化整个对象，不需要考虑字段的单独存储。</li>
<li><strong>原子性：</strong> 对整个对象进行存取。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li><strong>序列化依赖：</strong> 依赖于特定的序列化库，可能影响性能和跨语言使用。</li>
<li><strong>可读性：</strong> 二进制格式的字符串不易于阅读和调试。</li>
<li><strong>灵活性差：</strong> 如果对象结构发生变化，需要重新序列化。</li>
</ul>
<h1 id="2-将对象转换成Json格式"><a href="#2-将对象转换成Json格式" class="headerlink" title="2.将对象转换成Json格式"></a>2.将对象转换成Json格式</h1><p>Redis中保存的是JSON格式的字符串，可以清晰阅读对象的内容。<br><strong>优点：</strong> </p>
<ul>
<li><strong>跨语言性：</strong> JSON是一种跨语言的格式，易于在不同语言和系统之间交换数据。</li>
<li><strong>可读性：</strong> JSON格式的数据易于阅读。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li><strong>灵活性：</strong>不支持对象单个属性的存取，如果要修改对象属性只能整个对象读取修改重建。</li>
<li><strong>复杂结构存储：</strong>不适合存储复杂的对象结构，比如对象存在嵌套。</li>
</ul>
<h1 id="3-用hash存储对象"><a href="#3-用hash存储对象" class="headerlink" title="3.用hash存储对象"></a>3.用hash存储对象</h1><p>Redis的key作为整个hash结构在Redis中的索引；<br>fieldName是对象的属性名称；<br>fieldValue就是属性值。<br><strong>优点：</strong></p>
<ul>
<li><strong>可读性：</strong>hash保存对象结构清晰；</li>
<li><strong>灵活性：</strong>支持对单个属性的操作，只需要根据对应的fieldName来设置fieldValue即可。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>处理嵌套的对象比较麻烦。</li>
</ul>
<h1 id="4-怎么选取呢？"><a href="#4-怎么选取呢？" class="headerlink" title="4.怎么选取呢？"></a>4.怎么选取呢？</h1><p><strong>更新频繁的数据：</strong> 可以通过hash结构存储对象。<br><strong>读频繁的数据：</strong> 对于更新频率比较低，但是读取比较频繁的数据，选择string是比较好的方案。</p>
<blockquote>
<p>实际业务开发中，可以结合string和hash。</p>
</blockquote>
]]></content>
      <categories>
        <category>基础概念和原理</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis实战项目笔记二：查询缓存</title>
    <url>/2024/06/23/redis-project-note2/</url>
    <content><![CDATA[<h1 id="一、添加商户缓存"><a href="#一、添加商户缓存" class="headerlink" title="一、添加商户缓存"></a>一、添加商户缓存</h1><p><strong>业务需求：</strong></p>
<span id="more"></span>
<p>客户端提供商户id，返回商户信息。<br><strong>技术关键点：</strong></p>
<img src="/2024/06/23/redis-project-note2/img1.png" class="" title="img1">
<p>对于查询业务，为了提高系统的查询性能，使用Redis加快查询。</p>
<blockquote>
<p>遇到了Bug：<br>bug描述：<br>以hash形式将商铺信息保存到Redis，在用Hutool提供的BeanUtil.beanToMap时遇到了空指针异常。<br>bug解决方式可见：<a href="https://daisybby.github.io/2024/06/21/setFieldValueEditor-bug/#more">Hutool提供的BeanUtil.beanToMap出现空指针异常</a></p>
</blockquote>
<h1 id="二、为商铺类型添加缓存"><a href="#二、为商铺类型添加缓存" class="headerlink" title="二、为商铺类型添加缓存"></a>二、为商铺类型添加缓存</h1><p><strong>业务需求：</strong>首页有多个商铺分类，为商铺分类信息的查询添加Redis作为缓存，提高查询效率。<br><strong>流程图：</strong></p>
<img src="/2024/06/23/redis-project-note2/img2.png" class="" title="img2">
<p><strong>用什么类型保存呢？</strong></p>
<ul>
<li>可以用list、set和zset三种数据类型实现。list的元素是可以重复的，但是set和zset要保证元素的唯一性。商铺类型是唯一的，所以我们可以用set和zset来实现。</li>
<li>商铺有自己的sort属性，我们希望按照sort属性升序排序，那么我们可以用zset有序集合来实现。</li>
</ul>
<blockquote>
<p>其实也可以用list和set来实现，因为shopType每次都是全部获取，读取出来再重新排序即可。</p>
</blockquote>
<p>不过我还是选择了比较复杂的zset来练练手，嘿嘿。<br>实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryAllType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.从Redis查询所有商铺类型</span></span><br><span class="line">        Set&lt;String&gt; shopTypeList=stringRedisTemplate.opsForZSet().range(CACHE_SHOPTYPE_KEY,<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//2.查询成功，返回</span></span><br><span class="line">        <span class="keyword">if</span>(shopTypeList!=<span class="literal">null</span> &amp;&amp; !shopTypeList.isEmpty())&#123;</span><br><span class="line">            <span class="comment">//将String字符串转换成对象</span></span><br><span class="line">            List&lt;ShopType&gt; shopTypes=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(String shopType: shopTypeList)&#123;</span><br><span class="line">                shopTypes.add(JSONUtil.toBean(shopType,ShopType.class));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(shopTypes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.查询失败，从数据库查询</span></span><br><span class="line">        List&lt;ShopType&gt; shopTypes=query().orderByAsc(<span class="string">&quot;sort&quot;</span>).list();</span><br><span class="line">        <span class="keyword">if</span>(shopTypes==<span class="literal">null</span> || shopTypes.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;没有商铺类型！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.将商铺类型数据保存到Redis</span></span><br><span class="line">        <span class="keyword">for</span>(ShopType shopType:shopTypes)&#123;</span><br><span class="line">            stringRedisTemplate.opsForZSet().add(CACHE_SHOPTYPE_KEY,JSONUtil.toJsonStr(shopType),shopType.getSort());</span><br><span class="line">        &#125;</span><br><span class="line">        stringRedisTemplate.expire(CACHE_SHOPTYPE_KEY,CACHE_SHOPTYPE_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">//5.返回商铺类型信息</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(shopTypes);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>将shopType转换为JSON字符串，保存到zset有序集合中。</li>
<li>zset的保存语法add有三个参数，key，value和分数，这里的分数是shopType的sort字段值。zset默认按照分数从小到大排序，如果要倒序读取，可以把第3行的range换成reverseRange。或者保存的时候，sort取负值倒序保存。</li>
</ul>
<h1 id="三、缓存更新策略"><a href="#三、缓存更新策略" class="headerlink" title="三、缓存更新策略"></a>三、缓存更新策略</h1><h2 id="3-1-三种缓存更新策略"><a href="#3-1-三种缓存更新策略" class="headerlink" title="3.1.三种缓存更新策略"></a>3.1.三种缓存更新策略</h2><img src="/2024/06/23/redis-project-note2/img3.png" class="" title="img3">
<blockquote>
<p><strong>怎么选择更新策略呢？</strong></p>
<ul>
<li><strong>低一致性需求：</strong> 使用<strong>内存淘汰机制</strong>。例如商铺类别信息，虽然也有数据修改的可能性，但可能性很低，而且数据就这么多，直接保存到缓存就行，每次登录都会需要读取这部分数据。这也解释了为什么没有给缓存中的shopType数据设置过期时间。</li>
<li><strong>高一致性需求：主动更新+超时删除（兜底）</strong> 。例如商铺详情信息的缓存。</li>
</ul>
</blockquote>
<h2 id="3-2-操作缓存和数据库需要考虑的问题"><a href="#3-2-操作缓存和数据库需要考虑的问题" class="headerlink" title="3.2.操作缓存和数据库需要考虑的问题"></a>3.2.操作缓存和数据库需要考虑的问题</h2><h3 id="1-删除缓存还是更新缓存？"><a href="#1-删除缓存还是更新缓存？" class="headerlink" title="1.删除缓存还是更新缓存？"></a>1.删除缓存还是更新缓存？</h3><p>当数据库中的数据进行了更新，我们有两种策略来保证数据一致性：</p>
<ul>
<li>更新缓存：缓存数据做相应的修改；</li>
<li>删除缓存：直接删除这部分的缓存数据，下次查询时缓存未命中-&gt;查询数据库-&gt;新数据存入缓存。</li>
</ul>
<p><strong>性能分析：</strong></p>
<ul>
<li>更新缓存：一些数据更新操作比较频繁，但是访问频率很低，这就导致了大量无效的写缓存操作，且占用了缓存空间还用不到。</li>
<li>删除缓存：对于访问频率很低数据，本来就不会访问，所以没什么影响；对于访问频繁的数据，首次访问缓存未命中，但是后续加入缓存，不会对访问速度造成太大影响，而且也不会出现大量无效写缓存操作，缓存空间开销都是有用的。<blockquote>
<p>综上，选择<strong>删除缓存</strong>比较合理。</p>
</blockquote>
</li>
</ul>
<h3 id="2-如何保证缓存与数据库操作的原子性？同时成功或失败"><a href="#2-如何保证缓存与数据库操作的原子性？同时成功或失败" class="headerlink" title="2.如何保证缓存与数据库操作的原子性？同时成功或失败"></a>2.如何保证缓存与数据库操作的原子性？同时成功或失败</h3><ul>
<li>单体系统：将数据库和缓存操作放在一个事务中完成。</li>
<li>分布式系统：利用TCC等分布式事务方案。<font color="red">（这部分涉及到了分布式，等后续学习SpringCloud时再补充）</font></li>
</ul>
<h3 id="3-先操作缓存还是先操作数据库？"><a href="#3-先操作缓存还是先操作数据库？" class="headerlink" title="3.先操作缓存还是先操作数据库？"></a>3.先操作缓存还是先操作数据库？</h3><p>在学习多线程时就搞不清楚线程安全发生的场景怎么分析，多线程工作怎么出现冲突，发现了画图法这个妙妙方法。</p>
<img src="/2024/06/23/redis-project-note2/img4.png" class="" title="img4">
<p><strong>先删除缓存，再更新数据库：</strong></p>
<ul>
<li>线程不安全，在线程1更新数据库期间，线程2缓存访问未命中，然后读取数据库中的旧数据，存入缓存，最终出现：数据库-新数据，缓存-旧数据。</li>
<li>异常发生概率分析：在数据库更新期间，发生了三件事（缓存读、数据库读、缓存写），因为更新数据库的时间通常是比这三操作发生时间长，所以异常发生概率是比较高的。</li>
</ul>
<img src="/2024/06/23/redis-project-note2/img5.png" class="" title="img5">
<p><strong>先操作数据库，再删除缓存：</strong></p>
<ul>
<li>也有极端情况。在线程1先读取了数据库旧数据之后，把旧数据写入缓存之间，线程2完成了更新数据库和删除缓存操作。删除缓存操作就不讨论，没太大影响，关键是写缓存操作时间远远短于更新数据库时间，这种情况是<strong>很难发生</strong>的。</li>
<li>异常发生概率很低，所以可以考虑这种方式。<blockquote>
<p>综上：<strong>先更新数据库，再删除缓存</strong>是更安全合理的。</p>
</blockquote>
</li>
</ul>
<h1 id="四、缓存穿透、缓存雪崩和缓存击穿-（重难点）"><a href="#四、缓存穿透、缓存雪崩和缓存击穿-（重难点）" class="headerlink" title="四、缓存穿透、缓存雪崩和缓存击穿*（重难点）"></a>四、缓存穿透、缓存雪崩和缓存击穿*（重难点）</h1><h2 id="1-缓存穿透"><a href="#1-缓存穿透" class="headerlink" title="1.缓存穿透"></a>1.缓存穿透</h2><p><strong>缓存穿透</strong>是指客户端请求的数据在<strong>缓存和数据库都不存在</strong>，这样缓存永远不会生效，这些请求都会打到数据库。<br><strong>常见解决方案：</strong></p>
<ul>
<li>缓存空对象：<ul>
<li>优点：实现简单，维护方便</li>
<li>缺点：消耗内存，可能会出现短期数据不一致（缓存中保存了null且没过期，数据库中已经插入了对应的数据）。<img src="/2024/06/23/redis-project-note2/img6.png" class="" title="img6"></li>
</ul>
</li>
<li>布隆过滤器<ul>
<li>优点：内存占用较少，没有多余的key</li>
<li>缺点：<ul>
<li>布隆过滤器实现复杂</li>
<li>存在误判的可能</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>布隆过滤器的基本原理：<a href="https://daisybby.github.io/2024/06/22/Bloom-Filter/#more">布隆过滤器原理及其应用</a></p>
</blockquote>
<img src="/2024/06/23/redis-project-note2/img7.png" class="" title="img7">
<blockquote>
<p>本来想在这里实现布隆过滤器解决缓存穿透问题，但好像牵扯的比较多，需要考虑到项目启动和数据预热，等做到数据预热的时候来解决这部分问题。现在先通过null值方法来解决。<br><strong>通过null值解决缓存穿透问题：</strong><br>如果redis和数据库中都不存在对应的数据，那么在redis中设置一个null，防止请求再打到数据库。<br>但是我们是用hash结构保存的对象（shop为例），那么该怎么表示呢？代码中是获取的hash，我们直接添加一个字段exist，取0表示null，取1表示对象真的存在就行。</p>
</blockquote>
<h2 id="2-缓存雪崩"><a href="#2-缓存雪崩" class="headerlink" title="2.缓存雪崩"></a>2.缓存雪崩</h2><p><strong>缓存雪崩</strong>是指短时间内有大量缓存key失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。<br><strong>常见解决方案：</strong></p>
<ul>
<li>给不同Key的TTL添加随机值，避免同一时间大量key过期；</li>
<li>利用Redis集群提高服务的可用性；</li>
<li>给缓存业务添加降级限流策略；</li>
<li>给业务添加多级缓存。</li>
</ul>
<h2 id="3-缓存击穿"><a href="#3-缓存击穿" class="headerlink" title="3.缓存击穿"></a>3.缓存击穿</h2><p>&ensp;&ensp;&ensp;&ensp;<strong>缓存击穿</strong>也被称为热点key问题，一个被<strong>高并发访问</strong>并且<strong>缓存重建业务复杂</strong>（可以理解为缓存更新耗时长）的热点数据突然失效，导致大量的请求直接打到数据库，且大量线程困于缓存重建，造成系统性能下降。</p>
<img src="/2024/06/23/redis-project-note2/img8.png" class="" title="img8">
<p><strong>常见的解决方案：</strong></p>
<ul>
<li>互斥锁</li>
<li>逻辑过期</li>
</ul>
<h3 id="3-1-互斥锁"><a href="#3-1-互斥锁" class="headerlink" title="3.1.互斥锁"></a>3.1.互斥锁</h3><p>&ensp;&ensp;&ensp;&ensp;线程在查询数据库重建缓存之前先<strong>获取互斥锁</strong>。其他线程发现缓存未命中，获取互斥锁失败会<strong>循环重试</strong>查询缓存，直至缓存命中。</p>
<img src="/2024/06/23/redis-project-note2/img9.png" class="" title="img9">
<h3 id="3-2-逻辑过期"><a href="#3-2-逻辑过期" class="headerlink" title="3.2.逻辑过期"></a>3.2.逻辑过期</h3><p>&ensp;&ensp;&ensp;&ensp;缓存数据过期时并不是清除，而是发现逻辑过期，申请互斥锁，成功后开启一个<strong>新线程</strong>，查询数据库并重建缓存，<strong>新线程释放互斥锁</strong>。在查询数据库重建缓存期间，其他线程申请互斥锁失败，<strong>返回缓存中的旧数据</strong>。</p>
<img src="/2024/06/23/redis-project-note2/img10.png" class="" title="img10">
<h3 id="3-3-性能分析与对比"><a href="#3-3-性能分析与对比" class="headerlink" title="3.3.性能分析与对比"></a>3.3.性能分析与对比</h3><img src="/2024/06/23/redis-project-note2/img11.png" class="" title="img11">
<h3 id="3-4-代码实现互斥锁解决缓存击穿"><a href="#3-4-代码实现互斥锁解决缓存击穿" class="headerlink" title="3.4.代码实现互斥锁解决缓存击穿"></a>3.4.代码实现互斥锁解决缓存击穿</h3><img src="/2024/06/23/redis-project-note2/img12.png" class="" title="img12">
<blockquote>
<p>这部分的实现过程，算是一个难点，可以详细记录，作为项目难点。</p>
</blockquote>
<ol>
<li><strong>查询缓存，根据是否命中决定下一步操作</strong><br>需要注意的是，我们这里也要考虑缓存穿透问题，即使从redis获取的hashMap不是空的，也有可能exist字段为0。</li>
<li><strong>缓存未命中，为了避免发生缓存击穿，也就是多个请求访问的是同一个数据，短时间内都未命中，请求打到数据库</strong></li>
</ol>
<ul>
<li>取互斥锁：在redis中通过setIfAbsent添加字段lockKey，如果redis中已经有lockKey就不会再添加成功；</li>
<li>如果获取锁失败，则线程sleep一段时间（埋个坑，sleep时间怎么决定？），然后递归查询。</li>
<li>如果锁获取成功，查询数据库，查询不到则根据缓存穿透的解决策略设置exist字段；更新缓存，记得设置过期时间。</li>
<li>释放互斥锁。</li>
</ul>
<ol start="3">
<li><strong>线程sleep、递归和释放互斥锁三个关键点</strong><br>&ensp;&ensp;&ensp;&ensp;线程sleep是需要处理异常的，我们可以从获取互斥锁到更新完缓存，这段都包含在try catch块中，将unlock放在finally中，避免sleep异常导致互斥锁无法释放。<br>&ensp;&ensp;&ensp;&ensp;递归是在try catch块中的，尽管递归，但只要缓存命中，就会在到达finally之前层层return，因此不会出现没有申请到互斥锁，但是每次递归都unlock的情况。但是finally又保证了只要正常执行，一定会有unlock操作。<blockquote>
<p>这部分内容需要反复理解。</p>
</blockquote>
</li>
</ol>
<p>高并发场景的测试，需要用到JMeter，进行压力测试。</p>
<h3 id="3-5-通过逻辑过期解决缓存击穿"><a href="#3-5-通过逻辑过期解决缓存击穿" class="headerlink" title="3.5.通过逻辑过期解决缓存击穿"></a>3.5.通过逻辑过期解决缓存击穿</h3><img src="/2024/06/23/redis-project-note2/img13.png" class="" title="img13">
<p><strong>代码实现要点：</strong></p>
<ul>
<li>Redis中给shop增加一个属性段：过期时间。但是要保持不修改原有业务逻辑和代码，那么编写一个新的类RedisData，将过期时间和Shop对象打包成一个对象。</li>
<li>为什么缓存未命中，直接返回呢？因为逻辑过期策略里，缓存中没有就是业务涉及不到的数据，因为业务数据不会真的从缓存中消失，所以这里可以不考虑缓存穿透的问题。</li>
<li>线程成功获取到互斥锁时，一定要<strong>再次校验</strong>数据是否过期：因为可能出现如下情况：多线程情况下反复更新缓存。<img src="/2024/06/23/redis-project-note2/img14.png" class="" title="img14"></li>
</ul>
<h1 id="四、Redis工具类封装"><a href="#四、Redis工具类封装" class="headerlink" title="四、Redis工具类封装"></a>四、Redis工具类封装</h1><p>对于Redis解决缓存穿透、缓存击穿等问题的实现代码，不应该和业务逻辑代码混在一起。之前的代码都是针对shop写的，实际上user、product等实体也都需要实现。那么我们可以利用泛型封装这些方法。<br><strong>封装的方法如下：</strong></p>
<ul>
<li>set方法：向redis保存对象<ul>
<li>传入参数：key、Object对象、过期时间、时间单位</li>
<li>返回结果:void</li>
</ul>
</li>
<li>setWithLogicalExpire：向Redis保存对象，但要携带逻辑过期时间<ul>
<li>传入参数：key，Object对象、逻辑过期时间、时间单位</li>
<li>返回结果：void</li>
</ul>
</li>
<li>tryLock：逻辑过期时间线程尝试获取互斥锁<ul>
<li>传入参数：key。是指互斥锁的key</li>
<li>返回结果：boolean</li>
</ul>
</li>
<li>unlock：释放互斥锁<ul>
<li>传入参数：互斥锁的key</li>
<li>返回结果：void</li>
</ul>
</li>
<li>queryWithPassThrough：解决缓存穿透<ul>
<li>传入参数：<ul>
<li>String：keyPrefix，缓存中key前缀，如shop的前缀CACHE_SHOP_KEY。</li>
<li>ID：id，ID是一个泛型，因为实体id不一定都是Long或者都是String，有可能都有。</li>
<li>Class<R>：type，传入一个对象的类型，比如Shop.class。</li>
<li>Function&lt;ID,R&gt;：dbFallBack，通过id向数据库查询实体的函数，因为可能是查shop也可能是User，返回类型是一个R类型的对象，ID是传入查询方法的参数类型。在项目中是getById。</li>
<li>Long：time，设置的缓存过期时间</li>
<li>TimeUnit：unit，时间单位。</li>
</ul>
</li>
<li>返回结果：R类型的一个对象，比如一个shop对象。</li>
</ul>
</li>
<li>queryWithLogicalExpire：逻辑过期时间解决缓存击穿<ul>
<li>传入参数：<ul>
<li>String：keyPrefix，缓存key前缀。</li>
<li>String：lockKeyPrefix，互斥锁的前缀，因为互斥锁是和要查询的具体对象id有关。</li>
<li>ID：id，泛型，表示实体的id。</li>
<li>Class<R>：type，泛型，表示传入一个对象类型。</li>
<li>Function&lt;ID,R&gt;：dbFallBack，传入从数据库查询数据的方法，ID是参数类型，R是返回类型。</li>
<li>Long：time，逻辑过期时间。</li>
<li>TimeUnit：unit，逻辑过期时间的单位。</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>查询缓存基本结束。一边写代码，一边查资料解答自己的疑惑，还想要写笔记输出。说实话很累，但感觉自己学习的比较清楚。不过学完觉得缓存穿透、缓存雪崩和缓存击穿的概念以及常见解决方案，还是比较生疏，自己的笔记还是要多看的，不能总结了不看。</p>
</blockquote>
]]></content>
      <categories>
        <category>Redis项目笔记</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
</search>
